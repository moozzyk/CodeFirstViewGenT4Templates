<#
/*
Copyright (c) Pawel Kadluczka. All rights reserved.

AS IS, NO WARRANTY, USE ON YOUR OWN RISK

T4 template for creating pre-generated views for Entity Framework Code First application

Usage: 
1. Add this template to your project
2. Rename this template so that its name contains the name of your DbContext derived class (e.g. MyContext.Views.tt)
3. Right-click the template file in the Solution Explorer and select "Run Custom Tool"
4. If you have more than one DbContext derived class in your project you need to add a separate template for each
DbContext derived class you want to create pre-generated views for. 
*/
#>
<#@ template debug="false" hostspecific="true" language="C#" #>
<#@ output extension=".cs" #>
<#@ assembly name="$(TargetPath)"#>
<#@ assembly name="$(ProjectDir)$(OutDir)EntityFramework.dll"#>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Data.Entity" #>
<#@ import namespace="System.Data.Entity.Design" #>
<#@ import namespace="System.Data.Entity.Infrastructure" #>
<#@ import namespace="System.Data.Metadata.Edm" #>
<#@ import namespace="System.Data.Mapping" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Xml" #>
<#@ import namespace="System.Xml.Linq" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Entity.Design" #>
<#@ assembly name="System.Xml" #>
<#@ assembly name="System.Xml.Linq" #>
<#@ assembly name="EnvDTE" #>
<# 
	var configFilePath = GetConfigFilePath();
	if (configFilePath != null)
	{
		AppDomain.CurrentDomain.SetData("APP_CONFIG_FILE", configFilePath);
	}
 
	var contextTypeName = GetContextTypeName();
	WriteLine(GenerateViews(contextTypeName));
#>
<#+

	private string GenerateViews(string contextTypeName)
	{
		// Get Edmx for the context
		var edmx = GetEdmx(GetContextType(contextTypeName));

		// extract csdl, ssdl and msl artifacts from the Edmx
		XmlReader csdlReader, ssdlReader, mslReader;
		SplitEdmx(edmx, out csdlReader, out ssdlReader, out mslReader);

		// Initialize item collections
		var edmItemCollection = new EdmItemCollection(new XmlReader[] { csdlReader });
		var storeItemCollection = new StoreItemCollection(new XmlReader[] { ssdlReader });
		var mappingItemCollection = new StorageMappingItemCollection(edmItemCollection, storeItemCollection, new XmlReader[] { mslReader });

		// Initialize the view generator to generate views in C#
		var viewGenerator = new EntityViewGenerator() { LanguageOption = LanguageOption.GenerateCSharpCode };

		// generate views
		using(var memoryStream = new MemoryStream())
		{
			var writer = new StreamWriter(memoryStream);
			
			var errors = viewGenerator.GenerateViews(mappingItemCollection, writer, GetEdmxSchemaVersion(edmx)).ToList();

			if (errors.Any())
			{
				foreach (var error in errors)
				{
					Error(error.Message);
				}

				return string.Empty;
			}

			memoryStream.Position = 0;
			var reader = new StreamReader(memoryStream);
			return reader.ReadToEnd();
		}
	}

	private Type GetContextType(string contextTypeName)
	{
		foreach(var assembly in AppDomain.CurrentDomain.GetAssemblies().Where(a => !a.IsDynamic))
		{
			var contextType = assembly
								.GetTypes()
								.AsEnumerable()
								.FirstOrDefault(
									t => t.Name == contextTypeName && 
									typeof(DbContext).IsAssignableFrom(t));

			if(contextType != null )
			{
				return contextType;
			}
		}

		throw new InvalidOperationException(
			"Could not find the context type. Make sure the template name is using convention '{ContextTypeName}.Views.tt'");
	}

	private string GetContextTypeName()
	{
		var templateFileName = Path.GetFileNameWithoutExtension(Host.TemplateFile);

		var dotPosition = templateFileName.IndexOf('.');
		if(dotPosition <= 0)
		{
			throw new InvalidOperationException(
				string.Format("The template name '{0}' has an unexpected format.", Host.TemplateFile));
		}

		return templateFileName.Substring(0, dotPosition);
	}

	private XDocument GetEdmx(Type contextType)
	{		
		var ms = new MemoryStream();

		using(var writer = XmlWriter.Create(ms))
		{
			EdmxWriter.WriteEdmx((DbContext)Activator.CreateInstance(contextType), writer);
		}

		ms.Position = 0;

		return XDocument.Load(ms);
	}

	private void SplitEdmx(XDocument edmx, out XmlReader csdlReader, out XmlReader ssdlReader, out XmlReader mslReader)
	{
		// xml namespace agnostic to make it work with any version of Entity Framework
        var edmxNs = edmx.Root.Name.Namespace;

        var storageModels = edmx.Descendants(edmxNs + "StorageModels").Single();
        var conceptualModels = edmx.Descendants(edmxNs + "ConceptualModels").Single();
        var mappings = edmx.Descendants(edmxNs + "Mappings").Single();

        ssdlReader = storageModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        csdlReader = conceptualModels.Elements().Single(e => e.Name.LocalName == "Schema").CreateReader();
        mslReader = mappings.Elements().Single(e => e.Name.LocalName == "Mapping").CreateReader();
	}

	private string GetConfigFilePath()
	{
		var dte = (EnvDTE.DTE)((IServiceProvider)Host).GetService(typeof(EnvDTE.DTE));
		var project = dte.Solution.FindProjectItem(Host.TemplateFile).ContainingProject;
		var configFile = 
			project
			.ProjectItems
			.Cast<EnvDTE.ProjectItem>()
			.FirstOrDefault(i => string.Compare("web.config", i.Name, true) == 0 || string.Compare("app.config", i.Name, true) == 0);

		return configFile == null ? null : configFile.FileNames[0];
	}

	private Version GetEdmxSchemaVersion(XDocument edmx)
	{
		var edmxNs = edmx.Root.GetDefaultNamespace();

		if (edmxNs == "http://schemas.microsoft.com/ado/2009/11/edmx")
		{
			return EntityFrameworkVersions.Version3;
		}
		else if (edmxNs == "http://schemas.microsoft.com/ado/2008/10/edmx")
		{
			return EntityFrameworkVersions.Version2;
		}

		// V1, greater than V3 or non-edmx edmxNs
		throw new ArgumentException("Unsupported edmx version");
	}
#>